--parallel_add DEVICE_FAMILY="Cyclone V" MSW_SUBTRACT="NO" PIPELINE=0 REPRESENTATION="SIGNED" RESULT_ALIGNMENT="LSB" SHIFT=0 SIZE=4 WIDTH=32 WIDTHR=32 data result
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:25:18:06:53:SJ cbx_lpm_add_sub 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ cbx_nadder 2017:10:25:18:06:53:SJ cbx_padd 2017:10:25:18:06:53:SJ cbx_parallel_add 2017:10:25:18:06:53:SJ cbx_stratix 2017:10:25:18:06:53:SJ cbx_stratixii 2017:10:25:18:06:53:SJ cbx_util_mgl 2017:10:25:18:06:53:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 136 
SUBDESIGN par_add_sge
( 
	data[127..0]	:	input;
	result[31..0]	:	output;
) 
VARIABLE
	add1_result[32..0]	:	WIRE;
	add6_result[34..0]	:	WIRE;
	sft10a[34..0] : soft;
	sft2a[32..0] : soft;
	sft3a[32..0] : soft;
	sft4a[32..0] : soft;
	sft5a[32..0] : soft;
	sft7a[34..0] : soft;
	sft8a[34..0] : soft;
	sft9a[34..0] : soft;
	w202w	: WIRE;
	w206w	: WIRE;
	w477w[34..0]	: WIRE;

BEGIN 
	add1_result[] = sft2a[].out + sft3a[].out + sft4a[].out;
	add6_result[] = sft7a[].out + sft8a[].out + sft9a[].out;
	sft10a[].in = add6_result[];
	sft2a[].in = ( w206w, ( (! data[127..127]), ( data[126..126], ( data[125..125], ( data[124..124], ( data[123..123], ( data[122..122], ( data[121..121], ( data[120..120], ( data[119..119], ( data[118..118], ( data[117..117], ( data[116..116], ( data[115..115], ( data[114..114], ( data[113..113], ( data[112..112], ( data[111..111], ( data[110..110], ( data[109..109], ( data[108..108], ( data[107..107], ( data[106..106], ( data[105..105], ( data[104..104], ( data[103..103], ( data[102..102], ( data[101..101], ( data[100..100], ( data[99..99], ( data[98..98], ( data[97..96]))))))))))))))))))))))))))))))));
	sft3a[].in = ( w206w, ( (! data[95..95]), ( data[94..94], ( data[93..93], ( data[92..92], ( data[91..91], ( data[90..90], ( data[89..89], ( data[88..88], ( data[87..87], ( data[86..86], ( data[85..85], ( data[84..84], ( data[83..83], ( data[82..82], ( data[81..81], ( data[80..80], ( data[79..79], ( data[78..78], ( data[77..77], ( data[76..76], ( data[75..75], ( data[74..74], ( data[73..73], ( data[72..72], ( data[71..71], ( data[70..70], ( data[69..69], ( data[68..68], ( data[67..67], ( data[66..66], ( data[65..64]))))))))))))))))))))))))))))))));
	sft4a[].in = ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, ( w206w, w206w))))))))))))))))))))))))))))))));
	sft5a[].in = add1_result[];
	sft7a[].in = ( w202w, ( w202w, ( sft5a[32..32].out, ( (! data[31..31]), ( data[30..30], ( data[29..29], ( data[28..28], ( data[27..27], ( data[26..26], ( data[25..25], ( data[24..24], ( data[23..23], ( data[22..22], ( data[21..21], ( data[20..20], ( data[19..19], ( data[18..18], ( data[17..17], ( data[16..16], ( data[15..15], ( data[14..14], ( data[13..13], ( data[12..12], ( data[11..11], ( data[10..10], ( data[9..9], ( data[8..8], ( data[7..7], ( data[6..6], ( data[5..5], ( data[4..4], ( data[3..3], ( data[2..2], ( data[1..0]))))))))))))))))))))))))))))))))));
	sft8a[].in = ( w206w, ( w206w, ( w206w, ( (! data[63..63]), ( data[62..62], ( data[61..61], ( data[60..60], ( data[59..59], ( data[58..58], ( data[57..57], ( data[56..56], ( data[55..55], ( data[54..54], ( data[53..53], ( data[52..52], ( data[51..51], ( data[50..50], ( data[49..49], ( data[48..48], ( data[47..47], ( data[46..46], ( data[45..45], ( data[44..44], ( data[43..43], ( data[42..42], ( data[41..41], ( data[40..40], ( data[39..39], ( data[38..38], ( data[37..37], ( data[36..36], ( data[35..35], ( data[34..34], ( data[33..32]))))))))))))))))))))))))))))))))));
	sft9a[].in = ( w206w, ( w206w, ( w206w, ( sft5a[31..31].out, ( sft5a[30..30].out, ( sft5a[29..29].out, ( sft5a[28..28].out, ( sft5a[27..27].out, ( sft5a[26..26].out, ( sft5a[25..25].out, ( sft5a[24..24].out, ( sft5a[23..23].out, ( sft5a[22..22].out, ( sft5a[21..21].out, ( sft5a[20..20].out, ( sft5a[19..19].out, ( sft5a[18..18].out, ( sft5a[17..17].out, ( sft5a[16..16].out, ( sft5a[15..15].out, ( sft5a[14..14].out, ( sft5a[13..13].out, ( sft5a[12..12].out, ( sft5a[11..11].out, ( sft5a[10..10].out, ( sft5a[9..9].out, ( sft5a[8..8].out, ( sft5a[7..7].out, ( sft5a[6..6].out, ( sft5a[5..5].out, ( sft5a[4..4].out, ( sft5a[3..3].out, ( sft5a[2..2].out, ( sft5a[1..1].out, sft5a[0..0].out))))))))))))))))))))))))))))))))));
	result[31..0] = w477w[31..0];
	w202w = B"1";
	w206w = B"0";
	w477w[] = ( sft10a[34..33].out, sft10a[32..31].out, sft10a[30..29].out, sft10a[28..27].out, sft10a[26..25].out, sft10a[24..23].out, sft10a[22..21].out, sft10a[20..19].out, sft10a[18..17].out, sft10a[16..15].out, sft10a[14..13].out, sft10a[12..11].out, sft10a[10..9].out, sft10a[8..7].out, sft10a[6..5].out, sft10a[4..3].out, sft10a[2..1].out, sft10a[0..0].out);
END;
--VALID FILE
